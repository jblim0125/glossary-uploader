#  Copyright 2021 Collate
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#  http://www.apache.org/licenses/LICENSE-2.0
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.
"""
Mixin class containing PATCH specific methods

To be used by OpenMetadata class
"""
import json
import traceback
from copy import deepcopy
from typing import Dict, List, Optional, Type, TypeVar, Union

from pydantic.v1 import BaseModel

from generated.schema.type.basic import EntityLink
from generated.schema.type.entityReference import EntityReference
from generated.schema.type.tagLabel import TagLabel
from mobigen.datafabric.models.patch_request import build_patch
from mobigen.datafabric.client.client import Client
from mobigen.datafabric.client.apis.patch_mixin_utils import (
    PatchApisBase,
    PatchField,
    PatchOperation,
    PatchPath,
)
from mobigen.datafabric.utils.utils import model_str
from mobigen.datafabric.utils.logger import  rest_logger

logger = rest_logger()

Entity = BaseModel
T = TypeVar("T", bound=BaseModel)

OWNER_TYPES: List[str] = ["user", "team"]


class PatchApis(PatchApisBase):
    """
    OpenMetadata API methods related to Tables.

    To be inherited by OpenMetadata
    """

    client: Client

    def patch(
        self,
        entity: Type[T],
        source: T,
        destination: T,
        allowed_fields: Optional[Dict] = None,
        restrict_update_fields: Optional[List] = None,
        array_entity_fields: Optional[List] = None,
    ) -> Optional[T]:
        """
        Given an Entity type and Source entity and Destination entity,
        generate a JSON Patch and apply it.

        Args
            entity (T): Entity Type
            source: Source payload which is current state of the source in OpenMetadata
            destination: payload with changes applied to the source.
            allowed_fields: List of field names to filter from source and destination models
            restrict_update_fields: List of field names which will only support add operation

        Returns
            Updated Entity
        """
        try:
            patch = build_patch(
                source=source,
                destination=destination,
                allowed_fields=allowed_fields,
                restrict_update_fields=restrict_update_fields,
                array_entity_fields=array_entity_fields,
            )

            if not patch:
                return None

            res = self.client.patch(
                path=f"{self.get_suffix(entity)}/{model_str(source.id)}",
                data=str(patch),
            )
            return entity(**res)

        except Exception as exc:
            logger.debug(traceback.format_exc())
            logger.error(f"Error trying to PATCH : {exc}")

        return None

    def patch_description(
        self,
        entity: Type[T],
        source: T,
        description: str,
        force: bool = False,
    ) -> Optional[T]:
        """
        Given an Entity type and ID, JSON PATCH the description.

        Args
            entity (T): Entity Type
            source: source entity object
            description: new description to add
            force: if True, we will patch any existing description. Otherwise, we will maintain
                the existing data.
        Returns
            Updated Entity
        """
        instance: Optional[T] = self._fetch_entity_if_exists(
            entity=entity, entity_id=source.id
        )

        if not instance:
            return None

        if instance.description and not force:
            # If the description is already present and force is not passed,
            # description will not be overridden
            return None

        # https://docs.pydantic.dev/latest/usage/exporting_models/#modelcopy
        destination = source.copy(deep=True)
        destination.description = description

        return self.patch(entity=entity, source=source, destination=destination)

    def patch_tags(
        self,
        entity: Type[T],
        source: T,
        tag_labels: List[TagLabel],
        operation: Union[
            PatchOperation.ADD, PatchOperation.REMOVE
        ] = PatchOperation.ADD,
    ) -> Optional[T]:
        """
        Given an Entity type and ID, JSON PATCH the tag.

        Args
            entity (T): Entity Type
            source: Source entity object
            tag_label: TagLabel to add or remove
            operation: Patch Operation to add or remove the tag.
        Returns
            Updated Entity
        """
        instance: Optional[T] = self._fetch_entity_if_exists(
            entity=entity, entity_id=source.id, fields=["tags"]
        )
        if not instance:
            return None

        # Initialize empty tag list or the last updated tags
        source.tags = instance.tags or []
        destination = source.copy(deep=True)

        tag_fqns = {label.tagFQN.__root__ for label in tag_labels}

        if operation == PatchOperation.REMOVE:
            for tag in destination.tags:
                if tag.tagFQN.__root__ in tag_fqns:
                    destination.tags.remove(tag)
        else:
            destination.tags.extend(tag_labels)

        return self.patch(entity=entity, source=source, destination=destination)

    def patch_tag(
        self,
        entity: Type[T],
        source: T,
        tag_label: TagLabel,
        operation: Union[
            PatchOperation.ADD, PatchOperation.REMOVE
        ] = PatchOperation.ADD,
    ) -> Optional[T]:
        """Will be deprecated in 1.3"""
        logger.warning("patch_tag will be deprecated in 1.3. Use `patch_tags` instead.")
        return self.patch_tags(
            entity=entity, source=source, tag_labels=[tag_label], operation=operation
        )